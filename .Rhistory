legend.position=c(0.15, 0.95))
p7 <- ggram(c("male lawyer", "female lawyer"),
year_start = 1800,
corpus = "eng_2019",
ignore_case = TRUE,
smoothing = 3,
google_theme = TRUE) +
theme(legend.key.size = unit(1, 'cm'),
legend.direction="vertical",
legend.position=c(0.15, 0.95))
p7 <- ggram(c("male lawyer", "female lawyer"),
year_start = 1800,
corpus = "eng_2019",
ignore_case = TRUE,
smoothing = 3,
google_theme = TRUE) +
theme(legend.key.size = unit(1, 'cm'),
legend.direction="vertical",
legend.position=c(0.15, 0.95))
p8 <- ggram(c("male lawyer", "female lawyer", "lawyer"),
year_start = 1800,
corpus = "eng_2019",
ignore_case = TRUE,
smoothing = 3,
google_theme = TRUE) +
theme(legend.key.size = unit(1, 'cm'),
legend.direction="vertical",
legend.position=c(0.15, 0.95))
pc2.2 <- grid.arrange(p7, p8, nrow=1, ncol=2)
p7 <- ggram(c("male lawyer", "female lawyer"),
year_start = 1800,
corpus = "eng_2019",
ignore_case = TRUE,
smoothing = 3,
google_theme = TRUE) +
theme(legend.key.size = unit(1, 'cm'),
legend.direction="vertical",
legend.position=c(0.15, 0.95))
p7 <- ggram(c("male lawyer", "female lawyer"),
year_start = 1800,
corpus = "eng_2019",
ignore_case = TRUE,
smoothing = 3,
google_theme = TRUE) +
theme(legend.key.size = unit(1, 'cm'),
legend.direction="vertical",
legend.position=c(0.15, 0.95))
p7 <- ggram(c("male lawyer", "female lawyer"),
year_start = 1800,
corpus = "eng_2019",
ignore_case = TRUE,
smoothing = 3,
google_theme = TRUE) +
theme(legend.key.size = unit(1, 'cm'),
legend.direction="vertical",
legend.position=c(0.15, 0.95))
p7
p7 <- ggram(c("male lawyer", "female lawyer"),
year_start = 1800,
corpus = "eng_2019",
ignore_case = TRUE,
smoothing = 3,
google_theme = TRUE) +
theme(legend.key.size = unit(0.2, 'cm'),
legend.direction="vertical",
legend.position=c(0.15, 0.95))
p7 <- ggram(c("male lawyer", "female lawyer"),
year_start = 1800,
corpus = "eng_2019",
ignore_case = TRUE,
smoothing = 3,
google_theme = TRUE) +
theme(legend.key.size = unit(0.2, 'cm'),
legend.direction="vertical",
legend.position=c(0.15, 0.95))
p7
p7 <- ggram(c("male lawyer", "female lawyer"),
year_start = 1800,
corpus = "eng_2019",
ignore_case = TRUE,
smoothing = 3,
google_theme = TRUE) +
theme(legend.key.size = unit(0.3, 'cm'),
legend.direction="vertical",
legend.position=c(0.15, 0.95))
p7 <- ggram(c("male lawyer", "female lawyer"),
year_start = 1800,
corpus = "eng_2019",
ignore_case = TRUE,
smoothing = 3,
google_theme = TRUE) +
theme(legend.key.size = unit(0.3, 'cm'),
legend.direction="vertical",
legend.position=c(0.15, 0.95))
p8 <- ggram(c("male lawyer", "female lawyer", "lawyer"),
year_start = 1800,
corpus = "eng_2019",
ignore_case = TRUE,
smoothing = 3,
google_theme = TRUE) +
theme(legend.key.size = unit(0.3, 'cm'),
legend.direction="vertical",
legend.position=c(0.15, 0.95))
pc2.2 <- grid.arrange(p7, p8, nrow=1, ncol=2)
library(readr)
library(dplyr)
library(ggplot2)
library(janitor)
install.packages('janitor')
install_github("moderndive/moderndive", ref = "geom_parallel_slopes")
library(devtools)
install_github("moderndive/moderndive", ref = "geom_parallel_slopes")
library(tidyverse)
library(languageR)
library(broom)
library(effsize)
library(emmeans)
ratings <- as_tibble(ratings)
rating.lm2 <- lm(meanSizeRating ~ Class * Frequency, data=ratings)
summary(rating.lm2)
ratings %>% ggplot() +
aes(x = Frequency, color = Class, group = Class, y = meanSizeRating) +
geom_smooth(method = 'lm')
range(ratings$meanFamiliarity)
preds <- predict(rating.lm2, newdata, interval = 'confidence')
preds <- cbind(newdata, preds)
# --------------------------------------------------------
# Model prediction of a model with continuous predictor
rating.lm2 <- lm(meanSizeRating ~ meanFamiliarity, data=ratings)
summary(rating.lm2)
range(ratings$meanFamiliarity)
newdata <- tibble(meanFamiliarity = seq(2, 6, 1))
preds <- predict(rating.lm2, newdata, interval = 'confidence')
preds <- cbind(newdata, preds)
preds
View(ratings)
View(ratings)
rating.lm2 <- lm(meanSizeRating ~ Class * Frequency, data=ratings)
summary(rating.lm2)
ratings %>% ggplot() +
aes(x = Frequency, color = Class, group = Class, y = meanSizeRating) +
geom_smooth(method = 'lm')
library(tidyverse)
library(languageR)
library(broom)
library(effsize)
library(emmeans)
ratings <- as_tibble(ratings)
# --------------------------------------------------------
# Significant interaction
rating.lm1 <- lm(meanSizeRating ~ meanFamiliarity * Frequency, data=ratings)
summary(rating.lm1)
rating.lm2 <- lm(meanSizeRating ~ Class * Frequency, data=ratings)
summary(rating.lm2)
ratings %>% ggplot() +
aes(x = Frequency, color = Class, group = Class, y = meanSizeRating) +
geom_smooth(method = 'lm')
rating.lm2 <- lm(meanSizeRating ~ Class * Frequency, data=ratings)
summary(rating.lm2)
range(ratings$meanFamiliarity)
newdata <- tibble(meanFamiliarity = seq(2, 6, 1))
newdata
newdata <- tibble(meanFamiliarity = seq(2, 6, 0.8))
newdata
sort(unique(ratings$Class))
newpreds <- tibble(Class = sort(unique(ratings$Class)))
newpreds
class_preds <- predict(rating.lm.class, newpreds, interval = 'confidence')
# --------------------------------------------------------
# Model prediction of a model with categorical predictor
rating.lm.class <- lm(meanSizeRating ~ Class, data=ratings)
summary(rating.lm.class)
newpreds <- tibble(Class = sort(unique(ratings$Class)))
fits <- predict(rating.lm.class, newpreds)
SEs <- predict(rating.lm.class, newpreds, se.fit = TRUE)$se.fit
CI_tib <- tibble(fits, SEs)
CI_tib %>% mutate(LB = fits - 1.96*SEs, UB = fits + 1.96*SEs)
class_preds <- predict(rating.lm.class, newpreds, interval = 'confidence')
class_preds <- cbind(newpreds, class_preds)
class_preds
# --------------------------------------------------------
# Model prediction of a model with categorical predictor
rating.lm.class <- lm(meanSizeRating ~ Class, data=ratings)
summary(rating.lm.class)
sort(unique(ratings$Class))
newpreds <- tibble(Class = sort(unique(ratings$Class)))
newpreds
fits <- predict(rating.lm.class, newpreds)
fits
SEs <- predict(rating.lm.class, newpreds, se.fit = TRUE)$se.fit
SEs
CI_tib <- tibble(fits, SEs)
CI_tib
CI_tib %>% mutate(LB = fits - 1.96*SEs, UB = fits + 1.96*SEs)
class_preds <- predict(rating.lm.class, newpreds, interval = 'confidence')
class_preds
class_preds <- cbind(newpreds, class_preds)
class_preds
class_preds %>%
ggplot(aes(x = Class, y = fit)) +
geom_point(size = 4) +
geom_errorbar(aes(ymin = lwr, ymax = upr),
size = 1, width = 0.5) +
theme_minimal() +
theme(axis.text.x =
element_text(face = 'bold', size = 15),
axis.text.y =
element_text(face = 'bold', size = 15),
axis.title =
element_text(face = 'bold', size = 20))
class_preds %>%
ggplot(aes(x = Class, y = fit)) +
geom_point() +
geom_errorbar(aes(ymin = lwr, ymax = upr)) +
theme_minimal()
class_preds %>%
ggplot(aes(x = Class, y = fit)) +
geom_point(size = 4) +
geom_errorbar(aes(ymin = lwr, ymax = upr),
size = 1, width = 0.5) +
theme_minimal() +
theme(axis.text.x =
element_text(face = 'bold', size = 15),
axis.text.y =
element_text(face = 'bold', size = 15),
axis.title =
element_text(face = 'bold', size = 20))
# --------------------------------------------------------
# Model prediction of a model with continuous predictor
rating.lm2 <- lm(meanSizeRating ~ meanFamiliarity, data=ratings)
summary(rating.lm2)
range(ratings$meanFamiliarity)
newdata <- tibble(meanFamiliarity = seq(2, 6, 1))
newdata
newdata <- tibble(meanFamiliarity = seq(2, 6, 0.7))
newdats
newdata
preds <- predict(rating.lm2, newdata, interval = 'confidence')
preds
preds <- cbind(newdata, preds)
preds
preds %>%
ggplot(aes(x = meanFamiliarity, y = fit)) +
geom_ribbon(aes(ymin = lwr, ymax = upr), fill = 'grey', alpha = 0.5) +
geom_line()
preds %>%
ggplot(aes(x = meanFamiliarity, y = fit)) +
geom_ribbon(aes(ymin = lwr, ymax = upr), fill = 'grey', alpha = 0.5) +
geom_line() +
geom_text(data = ratings, aes(y = meanSizeRating, label = Word)) +
theme_minimal()
library(tidyverse)
library(languageR)
library(broom)
library(effsize)
library(emmeans)
ratings <- as_tibble(ratings)
# --------------------------------------------------------
# Significant interaction
rating.lm1 <- lm(meanSizeRating ~ meanFamiliarity * Frequency, data=ratings)
summary(rating.lm1)
rating.lm2 <- lm(meanSizeRating ~ Class * Frequency, data=ratings)
summary(rating.lm2)
ratings %>% ggplot() +
aes(x = Frequency, color = Class, group = Class, y = meanSizeRating) +
geom_smooth(method = 'lm')
# --------------------------------------------------------
# Model prediction of a model with categorical predictor
rating.lm.class <- lm(meanSizeRating ~ Class, data=ratings)
summary(rating.lm.class)
newpreds <- tibble(Class = sort(unique(ratings$Class)))
fits <- predict(rating.lm.class, newpreds)
SEs <- predict(rating.lm.class, newpreds, se.fit = TRUE)$se.fit
CI_tib <- tibble(fits, SEs)
CI_tib %>% mutate(LB = fits - 1.96*SEs, UB = fits + 1.96*SEs)
class_preds <- predict(rating.lm.class, newpreds, interval = 'confidence')
class_preds <- cbind(newpreds, class_preds)
class_preds %>%
ggplot(aes(x = Class, y = fit)) +
geom_point() +
geom_errorbar(aes(ymin = lwr, ymax = upr)) +
theme_minimal()
class_preds %>%
ggplot(aes(x = Class, y = fit)) +
geom_point(size = 4) +
geom_errorbar(aes(ymin = lwr, ymax = upr),
size = 1, width = 0.5) +
theme_minimal() +
theme(axis.text.x =
element_text(face = 'bold', size = 15),
axis.text.y =
element_text(face = 'bold', size = 15),
axis.title =
element_text(face = 'bold', size = 20))
# --------------------------------------------------------
# Model prediction of a model with continuous predictor
rating.lm2 <- lm(meanSizeRating ~ meanFamiliarity, data=ratings)
summary(rating.lm2)
range(ratings$meanFamiliarity)
newdata <- tibble(meanFamiliarity = seq(2, 6, 1))
newdata
newdata <- tibble(meanFamiliarity = seq(2, 6, 0.6))
newdata
library(tidyverse)
library(languageR)
library(broom)
library(emmeans)
library(ggplot2)
ratings <- as_tibble(ratings)
# --------------------------------------------------------
head(dative, 2)
dative$lDiffRecTheme <- dative$LengthOfRecipient - dative$LengthOfTheme
dative
dative.glm2 <- glm(RealizationOfRecipient ~ AnimacyOfRec + lDiffRecTheme,  data = dative, family = 'binomial')
summary(dative.glm2)
summary(dative.glm2)
dative.glm2 <- glm(RealizationOfRecipient ~ AnimacyOfRec +LengthOfRecipient,  data = dative, family = 'binomial')
summary(dative.glm2)
ggplot(dative.glm3, aes(x = lDiffRecTheme, y = RealizationOfRecipient, color = AnimacyOfRec, group = AnimacyOfRec)) +
geom_point(alpha=0.5) +
stat_smooth(method="lm", se = FALSE, fullrange = TRUE)
dative.glm3 <- glm(RealizationOfRecipient ~ AnimacyOfRec + lDiffRecTheme,  data = dative, family = 'binomial')
summary(dative.glm3)
ggplot(dative.glm3, aes(x = lDiffRecTheme, y = RealizationOfRecipient, color = AnimacyOfRec, group = AnimacyOfRec)) +
geom_point(alpha=0.5) +
stat_smooth(method="lm", se = FALSE, fullrange = TRUE)
ggplot(dative.glm3, aes(x = lDiffRecTheme, y = RealizationOfRecipient, color = AnimacyOfRec, group = AnimacyOfRec)) +
geom_point(alpha=0.5) +
stat_smooth(method="glm", se=FALSE, method.args = list(family=binomial))
dative.glm2 <- glm(RealizationOfRecipient ~ AnimacyOfRec +LengthOfRecipient,  data = dative, family = 'binomial')
summary(dative.glm2)
dative.glm2 <- glm(RealizationOfRecipient ~ AnimacyOfRec +LengthOfRecipient,  data = dative, family = 'binomial')
summary(dative.glm2)
dative.glm3 <- glm(RealizationOfRecipient ~ AnimacyOfRec + lDiffRecTheme,  data = dative, family = 'binomial')
summary(dative.glm3)
ggplot(dative.glm3, aes(x = lDiffRecTheme, y = RealizationOfRecipient, color = AnimacyOfRec, group = AnimacyOfRec)) +
geom_point(alpha=0.5) +
stat_smooth(method="glm", se=FALSE, method.args = list(family=binomial))
# --------------------------------------------------------
head(dative, 2)
install.packages("effects")
library(effects)
library(effects)
library(effects)
install.packages("effects")
install.packages("effects", repo = 'https://mac.R-project.org')
dative <- as_tibble(dative)
library(tidyverse)
library(languageR)
dative <- as_tibble(dative)
View(dative)
View(dative)
dative.glm2 <- glm(RealizationOfRecipient ~ AnimacyOfRec +
LengthOfRecipient, data = dative,
family = 'binomial')
tidy(dative.glm2)
library(broom)
tidy(dative.glm2)
dative_length <- dative %>% mutate(LDiffRecTheme = dative$LengthOfRecipient - dative$LengthOfTheme)
dative.glm3 <- glm(RealizationOfRecipient ~ AnimacyOfRec +
LDiffRecTheme, data = dative_length,
family = 'binomial')
tidy(dative.glm3)
plogis(-0.624 + 0 + 0.404 * -1)
-0.624 + 0 + 0.404 * -1
plogis(-0.624 + 0 + 0.404 * (-1))
-0.624 + 0 + 0.404 * (-1)
-0.624 + 0 + 0.404*(-1)
-0.624 + 0 + 0.404*(-1)
0.404 * -1
-0.624 + 0 + 0.404*(-1)
tibble(
AnimacyOfRec = 'animate', 'animate', 'animate'
LDiffRecTheme = 1, -9, 5
Prediction = predict.glm(dative.glm3, AnimacyOfRec, LDiffRecTheme)
)
tibble(
AnimacyOfRec = 'animate', 'animate', 'animate',
LDiffRecTheme = 1, -9, 5,
Prediction = predict.glm(dative.glm3, AnimacyOfRec, LDiffRecTheme)
)
tibble(AnimacyOfRec = 'animate', 'animate', 'animate',
LDiffRecTheme = 1, -9, 5)
pred <- tibble(AnimacyOfRec = 'animate', 'animate', 'animate',
LDiffRecTheme = 1, -9, 5)
pred
name_repair
pred <- tibble(AnimacyOfRec = 'animate', 'animate', 'animate',
LDiffRecTheme = 1, -9, 5)
pred <- tibble(AnimacyOfRec2 = 'animate', 'animate', 'animate',
LDiffRecTheme2 = 1, -9, 5)
pred <- tibble(AnimacyOfRec2 = 'animate'x3,
LDiffRecTheme2 = 1, -9, 5)
pred <- tibble(AnimacyOfRec = 'animate'x3,
LDiffRecTheme = 1, -9, 5)
pred <- tibble(AnimacyOfRec = 'animate'x3,
LDiffRecTheme = 1, -9, 5)
pred <- tibble(AnimacyOfRec = 'animate'x3,
LDiffRecTheme = 1,-9, 5)
pred <- tibble(AnimacyOfRec = 'animate'x3,
LDiffRecTheme = 1,-9, 5)
tibble(AnimacyOfRec = 'animate'x3,
LDiffRecTheme = 1,-9, 5)
tibble(AnimacyOfRec = 'animate'x3,
LDiffRecTheme = 1,(-9), 5)
tibble(AnimacyOfRec = 'animate'x3,
LDiffRecTheme = 1:3)
-0.624 + 0 + 0.404*(-1)
-0.624 + 0 + 0.404 * (5)
plogis(1.396)
plogis(-0.624 + 0 + 0.404*(-9))
plogis(-0.624 + 0 + 0.404*(-1))
plogis(-0.624 + 0 + 0.404*(5))
plogis(-0.624 + 0 + 0.404*(-1))
plogis(-0.624 + 0 + 0.404*(-9))
plogis(-0.624 + 0 + 0.404*(5))
plogis(-0.624 + 0 + 0.404*(1))
plogis(-0.624 + 0 + 0.404*(1))
plogis(-0.624 + 0 + 0.404*(-9))
plogis(-0.624 + 0 + 0.404*(5))
tidy(dative.glm3)
summary(dative.glm2)
lexdec <- as_tibble(lexdec)
library(tidyverse)
library(languageR)
library(broom)
library(lme4)
library(lmerTest)
library(ggeffects)
lexdec <- as_tibble(lexdec)
View(lexdec)
View(lexdec)
lexdec <- lexdec %>% filter(correct=='incorrect')
lexdec %>% filter(correct=='incorrect')
;exdec_filtered <- lexdec %>% filter(Correct=='incorrect')
lexdec_filtered <- lexdec %>% filter(Correct=='incorrect')
xylowess.fnc(RT~Trial|Subject, data=lexdec_filtered, ylab = "Log RT")
rt.lm1 <- lmer(RT ~ Trial + (1|Subject) + (1|Word), data=lexdec_filtered)
tidy(rt.lm1)
library(broom)
tidy(rt.lm1)
summary(rt.lm1)
summary(rt.lm1)
rt.lm2 <- lmer(RT ~ Trial + (1+Trial|Subject) + (1|Word), data=lexdec_filtered)
summary(rt.lm2)
rt.lm3 <- lmer(RT ~ Trial + Frequency + (1+Trial|Subject) + (1|Word), data=lexdec_filtered)
rt.lm1 <- lmer(RT ~ Trial + (1|Subject) + (1|Word), data=lexdec_filtered)
summary(rt.lm1)
rt.lm1 <- lmer(RT ~ Trial + (1|Subject) + (1|Word), data=lexdec_filtered)
summary(rt.lm1)
lexdec <- as_tibble(lexdec)
lexdec_filtered <- lexdec %>% filter(Correct=='incorrect')
xylowess.fnc(RT~Trial|Subject, data=lexdec_filtered, ylab = "Log RT")
lexdec_filtered <- lexdec %>% filter(Correct=='correct')
xylowess.fnc(RT~Trial|Subject, data=lexdec_filtered, ylab = "Log RT")
rt.lm1 <- lmer(RT ~ Trial + (1|Subject) + (1|Word), data=lexdec_filtered)
summary(rt.lm1)
rt.lm2 <- lmer(RT ~ Trial + (1+Trial|Subject) + (1|Word), data=lexdec_filtered)
summary(rt.lm2)
rt.lm3 <- lmer(RT ~ Trial + Frequency + (1+Trial|Subject) + (1|Word), data=lexdec_filtered)
summary(rt.lm3)
rt.lm1 <- lmer(RT ~ Trial + (1|Subject) + (1|Word), data=lexdec_filtered)
summary(rt.lm1)
21 * 6.408
xylowess.fnc(RT~Trial|Word, data=lexdec_filtered, ylab = "Log RT")
rt.lm2 <- lmer(RT ~ Trial + (1+Trial|Subject) + (1|Word), data=lexdec_filtered)
rt.lm2 <- lmer(RT ~ Trial + (1+Trial|Subject), data=lexdec_filtered)
summary(rt.lm2)
english.tb <- as_tibble(english)
library(tidyverse)
library(languageR)
library(broom)
# install the following packages if you haven't
library(emmeans)
# --------------------------------------------------------
# check the class
sapply(englisg.tb, class)
options(tibble.width = Inf)
english.tb <- as_tibble(english)
english.tb
View(english.tb)
View(english.tb)
columns(english.tb)
# --------------------------------------------------------
english.tb <- as_tibble(english)
columns(english.tb)
colnames(english.tb)
ggplot(english.tb, aes(x=AgeSubject, y=RTlexdec)) +
geom_boxplot()
ggplot(english.tb, aes(x=AgeSubject, y=RTlexdec, color=AgeSubject)) +
geom_boxplot()
ggplot(english.tb, aes(x=AgeSubject, y=RTlexdec, color=AgeSubject)) +
geom_col()
ggplot(english.tb, aes(x=AgeSubject, y=RTlexdec, color=AgeSubject)) +
geom_boxplot()
sessionInfo()
sessionifo
sessioninfo()
sessionInfo()
sessionInfo()
sessionInfo()
sessionInfo()
install.packages("bookdown", dependencies = TRUE)
rmarkdown::pandoc_version()
update.packages(ask = FALSE)
tinytex::install_tinytex()
tinytex::tlmgr_update()
bookdown::clean_book(TRUE)
setwd("~/Documents/GitHub/chl")
bookdown::clean_book(TRUE)
bookdown::render_book()
bookdown::serve_book()
